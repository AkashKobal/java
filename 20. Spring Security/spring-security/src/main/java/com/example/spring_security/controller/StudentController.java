package com.example.spring_security.controller;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

@RestController
public class StudentController {
    List<Student> students = new ArrayList<>(List.of(
            new Student(1, "John", "Java"),
            new Student(2, "Jane", "Python"),
            new Student(3, "Doe", "JavaScript")
    ));

    @GetMapping("/students")
    public List<Student> getAllStudents() {
        return students;
    }


    // we will get UnAuthorized error if we try to access this endpoint without authentication
    // Because of CSRF, we need to add CSRF token in the request header
    // to add,update and delete the data, we need to send CSRF token also along with the basic auth credentials
    // CSRF (Cross-Site Request Forgery) is a security feature that prevents unauthorized commands from being transmitted from a user that the web application trusts.
    // Get request is safe and does not require CSRF token, but Post,Update or Delete request requires CSRF token
    // CSRF token is generated by the server and sent to the client in the response header
    // Client should send this token in the request header to the server
    // If the token is not present in the request header, the server will reject the request

    @PostMapping("/students") // without CSRF token
    public String addStudent(Student student) {
        students.add(student);
        return "Student added successfully: " + student.getName();
    }


    // get CSRF token from the response header and send it in the request header
    @GetMapping("/csrf-token")
    public CsrfToken getCsrfToken(HttpServletRequest request) {
        // This will return the CSRF token in the response header
        // The client should send this token in the request header for subsequent requests
        return (CsrfToken) request.getAttribute("_csrf"); // doing type casting to CsrfToken, to get the CSRF exact token from the request attribute, otherwise it will return a generic Object type
        // _csrf is present in the response header
        // you will see it in the browser's developer tools under the "Network" tab or just inspect > source code
    }

    // with CSRF token
    @PostMapping("/students-csrf")
    public String addStudentWithCsrf(Student student, HttpServletRequest request) {
        // Here we can use the csrfToken to validate the request
        // In a real application, you would check if the csrfToken is valid
        CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");
        students.add(student);
        return "Student added successfully with CSRF token: "+ csrfToken.getToken() +"\n"
                +"headerName:"+csrfToken.getHeaderName()+"\n"
                +"parameterName:"+csrfToken.getParameterName();

    }

    @GetMapping("/students/csrf")
    public String getStudentsWithCsrf(HttpServletRequest request) {
        CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");
        return "CSRF Token: " + csrfToken.getToken() + "\n" +
               "Header Name: " + csrfToken.getHeaderName() + "\n" +
               "Parameter Name: " + csrfToken.getParameterName() + "\n" +
               "Students: " + students.toString();
    }


}
